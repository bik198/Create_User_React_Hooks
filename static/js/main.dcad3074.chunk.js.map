{"version":3,"sources":["Register/Information.js","Register/Account.js","Context/store.js","Register/StepperForm.js","Register/Register.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","margin","padding","breakpoints","down","textField","width","errorMessage","color","fontSize","marginTop","Information","formProps","register","errors","data","classes","firstName","lastName","age","className","Grid","container","direction","justify","alignItems","spacing","item","md","xs","TextField","id","label","name","variant","inputRef","error","defaultValue","message","z","Account","email","address","newsletter","style","StoreContext","createContext","backButton","marginRight","instructions","marginBottom","buttonLayout","marginLeft","informationSchema","yup","shape","required","accountSchema","StepperForm","useContext","information","account","informationForm","useForm","validationSchema","accountForm","React","useState","activeStep","setActiveStep","steps","onSubmit","console","log","prevActiveStep","handleSubmit","Stepper","alternativeLabel","map","Step","key","StepLabel","length","Typography","Button","onClick","stepIndex","getStepContent","disabled","type","logo","display","justifyContent","fontWeight","paperLayout","up","Register","topLayout","Paper","border","App","Boolean","window","location","hostname","match","ReactDOM","render","children","undefined","setInformation","password","confirmPassword","store","Provider","value","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dcad3074.chunk.js","sourcesContent":["import React, { Fragment } from 'react'\nimport Grid from '@material-ui/core/Grid'\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        margin: '-1rem 0 2rem 0',\n        padding: '0 7rem',\n        [theme.breakpoints.down('xs')]: {\n            padding: '0'\n        },\n        [theme.breakpoints.down('md')]: {\n            padding: '0'\n        },\n        marginTop: 'auto'\n    },\n    textField: {\n        width: '100%',\n        [theme.breakpoints.down('xs')]: {\n            width: '100%'\n        }\n    },\n    errorMessage: {\n        color: 'red',\n        fontSize: '0.9rem',\n        marginTop: '0.2rem'\n    }\n}));\n\n\nexport default function Information({ formProps: { register, errors }, data}) {\n    const classes = useStyles();\n    const { firstName, lastName, age } = data[0]\n\n    return (\n        <Fragment>\n            <div className={classes.root}>\n                <Grid container\n                    direction=\"row\"\n                    justify=\"center\"\n                    alignItems=\"center\"\n                    spacing={1}\n                >\n                    <Grid item md={12} xs={12}>\n                        <TextField\n                            id=\"firstName\"\n                            label=\"Firstname\"\n                            name=\"firstName\"\n                            className={classes.textField}\n                            margin=\"normal\"\n                            variant=\"outlined\"\n                            inputRef={register}\n                            error={!!errors.firstName}\n                            defaultValue={firstName}\n                        />\n                        {errors.firstName && <p className={classes.errorMessage}>{errors.firstName.message}</p>}\n\n                    </Grid>\n                    <Grid item md={12} xs={12}>\n                        <TextField\n                            id=\"lastName\"\n                            label=\"Lastname\"\n                            name=\"lastName\"\n                            className={classes.textField}\n                            margin=\"normal\"\n                            variant=\"outlined\"\n                            inputRef={register}\n                            error={!!errors.lastName}\n                            defaultValue={lastName}\n                        />\n                        {errors.lastName && <p className={classes.errorMessage}>{errors.lastName.message}</p>}\n                    </Grid>\n                </Grid>\n                <Grid container\n                    direction=\"row\"\n                    spacing={1}\n                >\n                    <Grid item md={12} xs={12}>\n                        <Grid item md={12} xs={12}>\n                            <TextField\n                                id=\"age\"\n                                label=\"age\"\n                                name=\"age\"\n                                className={classes.textField}\n                                margin=\"normal\"\n                                variant=\"outlined\"\n                                inputRef={register}\n                                error={!!errors.age}\n                                defaultValue={age}\n                            />\n                            {errors.z && <p className={classes.errorMessage}>{errors.age.message}</p>}\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </div>\n        </Fragment>\n    )\n}\n","import React, { Fragment } from 'react'\nimport Grid from '@material-ui/core/Grid'\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        margin: '-1rem 0 2rem 0',\n        padding: '0 7rem',\n        [theme.breakpoints.down('xs')]: {\n            padding: '0'\n        },\n        [theme.breakpoints.down('md')]: {\n            padding: '0'\n        },\n        marginTop: 'auto'\n    },\n    textField: {\n        width: '100%',\n        [theme.breakpoints.down('xs')]: {\n            width: '100%'\n        }\n    },\n    errorMessage: {\n        color: 'red',\n        fontSize: '0.9rem',\n        marginTop: '0.2rem'\n    }\n}));\n\nexport default function Account({ formProps: { register, errors }, data }) {\n    const classes = useStyles();\n    const { email, address, newsletter  } = data[0]\n\n    return (\n        <Fragment>\n            <div className={classes.root}>\n                <Grid container\n                    direction=\"row\"\n                    justify=\"center\"\n                    alignItems=\"center\"\n                    spacing={1}\n                >\n                    <Grid item md={12} xs={12}>\n                        <TextField\n                            id=\"email\"\n                            label=\"Email\"\n                            name=\"email\"\n                            className={classes.textField}\n                            margin=\"normal\"\n                            variant=\"outlined\"\n                            inputRef={register}\n                            error={!!errors.email}\n                            defaultValue={email}\n                        />\n                        {errors.email && <p className={classes.errorMessage}>{errors.email.message}</p>}\n\n                    </Grid>\n                    <Grid item md={12} xs={12}>\n                        <TextField\n                            id=\"address\"\n                            label=\"address\"\n                            name=\"address\"\n                            className={classes.textField}\n                            margin=\"normal\"\n                            variant=\"outlined\"\n                            inputRef={register}\n                            error={!!errors.address}\n                            defaultValue={address}\n                        />\n                        {errors.address && <p className={classes.errorMessage}>{errors.address.message}</p>}\n\n                    </Grid>\n                </Grid>\n                <Grid container\n                    direction=\"row\"\n                    justify=\"center\"\n                    alignItems=\"center\"\n                    spacing={1}\n                >\n\n                    <Grid item md={12} xs={12}>\n                        <p style={{ color:\"red\"}}>Newsletter</p>\n                        <TextField\n                            id=\"newsletter\"\n                            label=\"Daily / Weekly / Monthly\"\n                            name=\"newsletter\"\n                            className={classes.textField}\n                            margin=\"normal\"\n                            variant=\"outlined\"\n                            inputRef={register}\n                            error={!!errors.newsletter}\n                            defaultValue={newsletter}\n                        />\n                        {errors.newsletter && <p className={classes.errorMessage}>{errors.newsletter.message}</p>}\n\n                    </Grid>\n                </Grid>\n            </div>\n        </Fragment>\n    )\n}\n","import React, { useState, createContext } from 'react'\n\nexport const StoreContext = createContext({})\n\nexport const StoreContextProvider = ({ children }) => {\n\n    const [information, setInformation] = useState({ firstName: undefined, lastName: undefined, age: undefined })\n    const [account, setAccount] = useState({ email: undefined, password: undefined, confirmPassword: undefined, address: undefined, newsletter: undefined})\n\n    const store = {\n        information: [information, setInformation],\n        account: [account, setAccount],\n    }\n    console.log(store)\n    return <StoreContext.Provider value={store}>{children}</StoreContext.Provider>\n}","import React, { useContext } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Stepper from '@material-ui/core/Stepper'\nimport Step from '@material-ui/core/Step'\nimport StepLabel from '@material-ui/core/StepLabel'\nimport Button from '@material-ui/core/Button'\nimport Typography from '@material-ui/core/Typography'\nimport Information from './Information'\nimport Account from './Account'\nimport useForm from \"react-hook-form\";\nimport * as yup from \"yup\";\nimport { StoreContext } from '../Context/store'\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        width: '100%',\n    },\n    backButton: {\n        marginRight: theme.spacing(1),\n    },\n    instructions: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n    buttonLayout: {\n        marginLeft: '7rem',\n        [theme.breakpoints.down('xs')]: {\n            marginLeft: '0'\n        }\n    }\n}));\n\n\nconst informationSchema = yup.object().shape({\n    firstName: yup.string().required('This field is required.'),\n    lastName: yup.string().required('This field is required.'),\n    age: yup.string().required('This field is required.'),\n});\n\nconst accountSchema = yup.object().shape({\n    email: yup\n        .string()\n        .email('Invalid email.')\n        .required('This field is required.'),\n    address: yup\n        .string()\n        .required('This field is required.'),\n    newsletter: yup\n        .string()\n        .required('This field is required.'),\n});\n\nfunction getSteps() {\n    return ['Basic Information', 'Address'];\n}\n\nexport default function StepperForm() {\n    const classes = useStyles();\n    const { information, account } = useContext(StoreContext)\n    const informationForm = useForm({\n        validationSchema: informationSchema\n    });\n\n    const accountForm = useForm({\n        validationSchema: accountSchema\n    });\n\n    const [activeStep, setActiveStep] = React.useState(0);\n    const steps = getSteps();\n\n    const handleNext = () => {\n        setActiveStep(prevActiveStep => prevActiveStep + 1);\n    };\n\n    const handleBack = () => {\n        setActiveStep(prevActiveStep => prevActiveStep - 1);\n    };\n\n    const handleReset = () => {\n        information[1]({})\n        account[1]({})\n        setActiveStep(0);\n    };\n\n    const onSubmit = data => {\n        console.log(data);\n        if(activeStep === 0){\n            information[1](data)\n        }\n        else if(activeStep === 1){\n            account[1](data)\n        }\n        handleNext()\n    };\n\n    function getStepContent(stepIndex) {\n        switch (stepIndex) {\n            case 0:\n                return <Information formProps={informationForm} data={information}/>;\n            case 1:\n                return <Account formProps={accountForm} data={account} />;\n            default:\n                return 'Unknown stepIndex';\n        }\n    }\n\n    return (\n        <div className={classes.root}>\n            <form onSubmit={activeStep === 0 ? informationForm.handleSubmit(onSubmit) : accountForm.handleSubmit(onSubmit)}>\n                <Stepper activeStep={activeStep} alternativeLabel>\n                    {steps.map(label => (\n                        <Step key={label}>\n                            <StepLabel>{label}</StepLabel>\n                        </Step>\n                    ))}\n                </Stepper>\n                <div>\n                    {activeStep === steps.length ? (\n                        <div className={classes.buttonLayout}>\n                            {/*<p>{JSON.stringify(StoreContext)}</p>*/}\n                            <Typography className={classes.instructions}>Thank you for regestering with us.</Typography>\n                            <Button variant=\"contained\" color=\"primary\" onClick={handleReset}>Register new user</Button>\n                        </div>\n                    ) : (\n                            <div>\n                                <div className={classes.instructions}>{getStepContent(activeStep)}</div>\n                                <div className={classes.buttonLayout}>\n                                    <Button\n                                        disabled={activeStep === 0}\n                                        onClick={handleBack}\n                                        className={classes.backButton}\n                                        variant=\"outlined\"\n                                    >\n                                        Back\n                                    </Button>\n                                    <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n                                        {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\n                                    </Button>\n                                </div>\n                            </div>\n                        )}\n                </div>\n            </form>\n        </div>\n    );\n}","import React, { Fragment } from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid'\nimport Paper from '@material-ui/core/Paper'\nimport StepperForm from './StepperForm'\n\nconst useStyles = makeStyles(theme => ({\n    logo: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        padding: '0.5rem',\n        color: 'blue',\n        fontWeight: 'bold'\n    },\n    paperLayout: {\n        padding: '2rem',\n        [theme.breakpoints.up('md')]: {\n            width: '35em'\n        },\n        marginTop: '5rem',\n        margin: 'auto',\n        border: '1px solid red',\n        borderRadius: '4px',\n        [theme.breakpoints.down('xs')]: {\n            marginTop: '3rem'\n        }\n    },\n}));\n\nexport default function Register() {\n    const classes = useStyles();\n    return (\n        <Fragment>\n            <Grid container\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n                className={classes.topLayout}\n            >\n                <Grid item md={11} xs={11}>\n                    <Paper className={classes.paperLayout}>\n                        <Grid container>\n                            <Grid item md={12} xs={12}>\n                                <div className={classes.logo}>\n                                    <div className={classes.border}>\n                                        2 Step UI Wizard to Create User\n                                    </div>\n                                </div>\n                            </Grid>\n                            <Grid item md={12} xs={12}>\n                                <StepperForm/>\n                            </Grid>\n                        </Grid>\n                    </Paper>\n                </Grid>\n            </Grid>\n        </Fragment>\n    )\n}\n","import React from 'react';\nimport './App.css';\nimport Register from './Register/Register';\n\nfunction App() {\n  return (\n    <Register/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { StoreContextProvider } from './Context/store'\n\nReactDOM.render(<StoreContextProvider>\n    <App />\n</StoreContextProvider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}